
@using SharedLibrary.LibraryServices.libraryLocalStorageService
@implements IDisposable
@* @page "/broadsideSD/{ChooseFromOwnedColleciton:bool}" *@
@* gameId added in 1.1.9 to allow retrieveal of data if the page closes mid game *@
@page "/broadsideSD/{ChooseFromOwnedColleciton:bool}/{gameId}"
@layout NoMenuLayout
@inject ILocalStorageFromLibrary StorServ
@* @using ShipSel3.Services.UnitsandListsServiceClient *@

@inject IUnitsandListsServiceClient ULSC

@* 
    This site advised how to use the Navigationlock to stop inadvertently navigating away from the page to save data.
    Had to update VS 2022 and update to .Net 8 and then fix this project (update packages and rebuild). Surprised it actually worked.
    https://mattjameschampion.com/2023/07/04/controlling-and-preventing-navigation-events-in-blazor-using-navigationlock/
 *@


<NavigationLock ConfirmExternalNavigation="@ConfirmExternalNavigation" OnBeforeInternalNavigation="@OnBeforeInternalNavigation"></NavigationLock> 


@* <label for="confirm-external-navigation-checkbox">Confirm External Navigation</label>
<input id="confirm-external-navigation-checkbox" type="checkbox" @bind="@ConfirmExternalNavigation">
 *@
<div class="nav_row">
    <div class="settings_menu_row">

        <div>
            <button class="settings_button" @onclick="() => ChangeSettingsFlag()">Settings </button>
        </div>
        <div class="settings_options" hidden="@(!@showSettings)">
            <div class="settings_option">
                <label for="setting_1">Hide QRS</label>
                <input class="settings_input" id="setting_1" type="checkbox" @bind-value=@hideQRSTables />
            </div>
            <div class="settings_option">
                <label for="setting_2">Show Damage card text</label>
                <input class="settings_input" id="setting_2" type="checkbox" @bind-value=@hideDamageCards/>
            </div>
            <div class="settings_option">
                <label for="setting_3">Ignore failed save warning</label>
                <input class="settings_input" id="setting_3" type="checkbox" @bind-value=@ignoreSaveFails />
            </div>

        </div>

    </div>
</div>

<main class="main">

    <div class="main_heading">
        @* <h4>Select a Ship</h4> *@
        <h2 class="ship_name_heading">@selectedShip.ShipName</h2>
    </div>

    <div class="main_container">
        <div class="ship_list_nav_bar_left_container">
            <div class="simple_ship_list" hidden="@(!ShowSimpleListOfShips)">
                @for (int r = 0; r < @BroadsideSDSList.Count; r++)
                {
                    var temp = r;
                    <button class="ship_button" @onclick="() => ChangeSelectedShip(BroadsideSDSList[temp])">@BroadsideSDSList[r].ShipName</button>
                }
            </div>

            <div class="expanded_ship_list" hidden ="@(ShowSimpleListOfShips)">
                @for (int r = 0; r < @BroadsideSDSList.Count; r++)
                {
                    var temp = r;
                    <div class="advanced_ship_view"> 
                        <button class="ship_button_advanced" @onclick="() => ChangeSelectedShip(BroadsideSDSList[temp])">@BroadsideSDSList[r].ShipName</button>
                        <label class="ship_label_adanced">@BroadsideSDSList[r].summaryText</label>
                    </div>
                }
            </div>

            <button class="toggle_advanced_list" @onclick="() => ToggleAdvancedShipView()">@toggleShipViewName</button>
        </div>

        <div class="ship_sds_status_right_container">
            <div class="SDS_and_Stats">
                <div class="SDS">
                    @* Contains only the ship image *@
                    @* <img class="ship_image" src="ShipImages/3/5/Pillau.jpg" /> *@
                    <div>
                        <img class="ship_image" src=@selectedShip.ImagePath/>
                    </div>
                    <div class="qrs_tables" hidden="@hideQRSTables">
                        <div class="qrs_divs">
                            <label class="qrs_label">Ship Size</label>
                            <img class="qrs_battery_image" src="Rules/3/ship_size_table.jpg" />
                        </div>

                        <div class="qrs_divs">
                            <label class="qrs_label">Battery Ranges</label>
                            <img class="qrs_battery_image" src="Rules/3/battery_ranges_table.jpg" />
                        </div>

                        <div class="qrs_divs">
                            <label class="qrs_label">Gun Modifiers</label>
                            <img class="qrs_gun_modifiers" src="Rules/3/directed_gunnery_mod_table.jpg" />
                        </div>

                        <div class="qrs_divs">
                            <label class="qrs_label">Damage Table</label>
                            <img class="qrs_damage_modifiers" src="Rules/3/damage_table.jpg" />
                        </div>

                        <div class="qrs_divs">
                            <label class="qrs_label">Torpedo Modifiers</label>
                            <img class="qrs_damage_modifiers" src="Rules/3/torpedo_attack_modifier.jpg" />
                        </div>

                        <div class="qrs_divs">
                            <label class="qrs_label">Change orders</label>
                            <img class="qrs_damage_modifiers" src="Rules/3/changing_orders_table.jpg" />
                        </div>

                    </div>
                </div>
                <div class="ship_current_stats_and_order">
                    @* Contains editiable fields for the ship *@
                    <div class="ship_stats">
                        <div class="rename_ship" hidden="@selectedShip.renameHidden">
                            <label for="rename_ship_input">Ship Name</label>
                            <input class="rename_ship_input_cl" id="rename_ship_input" type="text" @bind-value=@selectedShip.ShipName @onselectionchange="saveShipData" />
                        </div>

                        <div class="input_field">
                            <label title="The splash marker this ship is using" for="splash_label">Splash label Id</label>
                            <input class="stat_input" id="splash_label" type="text" title="The splash marker this ship is using" @bind-value=@selectedShip.DirectedGunTag @onselectionchange="saveShipData" />
                        </div>

                        <div class="input_field">
                            <label for="current_speed">Current Speed</label>
                            @* <input class="stat_input" id="current_speed" type="number" @bind-value=@selectedShip.CurrentSpeed @onselectionchange="saveShipData" /> *@

                            <select class="stat_input" id="current_speed" @bind=@selectedShip.CurrentSpeed @onselectionchange="saveShipData">
                                @for (int i = 0; i <= 8; i++)
                                {
                                    <option value=@i>@i</option>
                                }
                            </select>

                        </div>

                        <div class="input_field">
                            <label for="hull_hits">Hull Hits</label>
                        
                            @* <input class="stat_input" id="hull_hits" type="number" @bind-value=@selectedShip.HullHits @onselectionchange="saveShipData" /> *@
                            <select class="stat_input" id="hull_hits" @bind=@selectedShip.HullHits @onselectionchange="saveShipData">
                                @for (int i = 0; i <= 12; i++)
                                {
                                    <option value=@i>@i</option>
                                }
                            </select>

                        </div>
                        <div class="input_field">
                            <label title="Number of flooding hits" for="flooding_hits">Flooding hits</label>
                            @* <input class="stat_input" id="hull_hits" type="number" title="Number of flooding hits" @bind-value=@selectedShip.FloodingHits @onselectionchange="saveShipData" />\ *@
                            <select class="stat_input" id="flooding_hits" @bind=@selectedShip.FloodingHits @onselectionchange="saveShipData">
                                @for (int i = 0; i <= 8; i++)
                                {
                                    <option value=@i>@i</option>
                                }
                            </select>

                        </div>

                    </div>
                    <div class="torpedos">
                        <h5>Torpedoes</h5>

                        <div class="checkbox_option">
                            <label class="checkbox_text" for="torpedos_fired">Torps used</label>
                            <input class="torp_input" id="torpedos_fired" type="checkbox" @bind=@selectedShip.torpsFired @oninput="saveShipData" />
                        </div>

                        <div class="checkbox_option">
                            <label class="checkbox_text" for="port_wing_torp_fired">Port torps used</label>
                            <input class="torp_input" id="port_wing_torp_fired" type="checkbox" @bind=@selectedShip.portTorpsFired @oninput="saveShipData" />
                        </div>

                        <div class="checkbox_option">

                            <label class="checkbox_text" for="starb_wing_torp_fired">Starboard torps used</label>
                                <input class="torp_input" id="starb_wing_torp_fired" type="checkbox" @bind=@selectedShip.starTorpsFired @oninput="saveShipData" />
                        </div>

                    </div>
                    <div class="ship_order">
                        <h5>Ship order</h5>
                        @* <select @bind=selectedShip.selectedOrderCard  Name="Name_of_list_box" @onclick="() => ChangeOrderImage()"> *@
                        <select class="ship_order_select" @bind=selectedShip.selectedOrderCard Name="Name_of_list_box" @bind:after="() => ChangeOrderImage()" >

                            @for (int i = 0; i < @OrderCardList.Count; i++)
                            {
                                <option value=@OrderCardList[i].id>@OrderCardList[i].Name</option>
                            }
                        </select>
                        <div class="checkbox_option">
                            @* <label for="order_active">Order is active</label> *@
                            @* <input class="stat_input" id="order_active" type="checkbox" @bind=@selectedShip.orderIsActive @oninput="saveShipData" /> *@
                            <label class="checkbox_text" for="order_active">Order is active</label>
                            <input class="torp_input" id="order_active" type="checkbox" @bind=@selectedShip.orderIsActive @oninput="saveShipData" />
                        </div>

                        <div class="ship_order_card_container">
                            @* <img class ="ship_order_card" src="BroadsidesCards/Orders/more_speed.jpg"/> *@
                            <img class="ship_order_card" src="@selectedShip.selectedOrderImagePath" @onselectionchange="saveShipData" />
                        </div>
                    </div>

                </div>
            </div>
            <div class="damage_cards">
                <h4>Damage Cards</h4>

                <div>
                    <button class="add_damage_card" @onclick="() => AddDamageCard()">Add damage card</button>
                </div>
                <div class="damage_cards_container">
                    @foreach (var item in selectedShip.DamageCards)
                    {
                        <div class="damage_card_and_delete">

                            <img hidden="@hideDamageCards"  id="@item.id" class="damage_card" src=@item.ImagePath />
                            <div hidden="@(!@hideDamageCards)">
                                <label class="damage_card_text ">@item.card_text</label>
                            </div>

                            <PopContainer idOfelement="@item.id" ConfirmedChanged2="RemoveDamageCard" />
                        </div>
                    }
                </div>


            </div>
        </div>


    </div>
</main>

@code {

    [Parameter]
    public bool ChooseFromOwnedColleciton { get; set; } = false;


    [Parameter]
    public string gameId { get; set; }

    [Inject] IJSRuntime? JsRuntime { get; set; }
    private List<SH.BroadsideSDS> BroadsideSDSList = new List<SH.BroadsideSDS>();  //A list of all items that have been selected

    private bool shipDataChanged { get; set; } = false;

    //selectedShip is the ship that the user has selected. The first ship in the list will be selected upon creation of this list

    // private SH.BroadsideSDS selectedShip { get; set; } = new SH.BroadsideSDS(StorServ);
    private SH.BroadsideSDS selectedShip { get; set; }
    private bool ConfirmExternalNavigation { get; set; } = true;

    private List<SH.OrderCard> OrderCardList = new List<SH.OrderCard>();  //a list of order cards

    private List<SH.DamageCardData> DamageCardList = new List<SH.DamageCardData>();  //a list of all damage cards. Used to create DamageCardDeck
    private List<SH.DamageCard> DamageCardDeck = new List<SH.DamageCard>();   //the deck of damage cards to be drawn from

    public BroadsideSD()
    {

        selectedShip = new SH.BroadsideSDS(StorServ);
    }

    private bool ShowSimpleListOfShips { get; set; } = true;
    private string toggleShipViewName { get; set; } = "Show Summary";

    private bool showSettings { get; set; } = false;
    private bool hideQRSTables { get; set; } = false;
    private bool hideDamageCards { get; set; } = false;
    private bool ignoreSaveFails { get; set; } = false;
    private bool pageStarting { get; set; } = true;
    PeriodicTimer periodicTimer = new(TimeSpan.FromMilliseconds(2500));


    #region Initialization code
    protected override void OnInitialized()
    {
        RunTimer();  // fire-and-forget
    }

    protected override async Task OnInitializedAsync()
    {

        await BuildListOfOrderCards();
        await GetListOfDamageCards();

        base.OnInitialized();


        //If the SDS's have already been created, retrieve that data
        SH.ServiceResponse<bool> gameInProgress = await StorServ.IsGameInProgress(gameId);

        if (!gameInProgress.Data)
        {
            //if not, generate new SDS's
            var SelectedUnitsResponse = await StorServ.RetrieveAllUnits();

            //convert the retrieved units into BroadsideSDS objects
            CreateSDSObjects(SelectedUnitsResponse.Data);

            //save the game ID
            SH.ServiceResponse<bool> gameIdSaved = await StorServ.SaveGameProgressID(gameId);

            if (gameIdSaved.Data != true)
            {
                if (ignoreSaveFails == false)
                {
                    await JsRuntime.InvokeVoidAsync("alert", "Game Id not saved."); // Dont know how to handle if it doenst work. Pretty fked if this happens
                }
            }

            await StorServ.SaveAllBroadSDS(BroadsideSDSList);
        }
        else
        {
            //await JsRuntime.InvokeVoidAsync("alert", "Game Id found."); Test message

            loadExistingSDSObjects();
        }


        await CreateDamageDeck();

        pageStarting = false;       //initialising finished
    }
    #endregion 

    #region Timer stuff
    async void RunTimer()
    {
        while (await periodicTimer.WaitForNextTickAsync())
        {
            saveToStorage();
        }
    }

    public void Dispose()
    {

        periodicTimer?.Dispose();
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext locationChangingContext)
    {
        if (JsRuntime is null) return;
        var continueNavigationEvent = await JsRuntime.InvokeAsync<bool>("confirm", $"You will loose any data enetered if you navigate away! Do you want to stuff it up?");
        if (!continueNavigationEvent) locationChangingContext.PreventNavigation();
    }

    #endregion

    #region Save ship data
    private void saveShipData()
    {
        shipDataChanged = true;
    }

    private async void saveToStorage()
    {
        // System.Diagnostics.Debugger.Break();

        if (pageStarting)
        {
            //dont start saving until initialisation is complete
            return;
        }

        if (shipDataChanged)
        {
            Console.WriteLine("Saving ship data");
            //only save if ship data has changed
            ServiceResponse<bool> vsrReturn = await StorServ.UpdateIndividualSDS(selectedShip);


            if (vsrReturn != null)
            {
                if (vsrReturn.Success == false)
                {
                    //just a visual cue that shit hasnt worked properly
                    var continueNavigationEvent = await JsRuntime.InvokeAsync<bool>("confirm", $"Warning, data not saved. These warnings can be hidden in the settings option");
                }
            }
            shipDataChanged = false;
        }
    }

    #endregion

    #region Damage card code

    private async Task RemoveDamageCard(int response)
    {

        if (response != 0)
        {
            Console.WriteLine("Remove card number = " + response);

            DamageCard dcToDelete = new DamageCard();
            foreach (var item in selectedShip.DamageCards)
            {
                if(item.id == response){
                    dcToDelete = item;
                }
            }

            selectedShip.DamageCards.Remove(dcToDelete);

            selectedShip.setSummaryText();

            saveShipData();
            ///have to delete the card from the collection. Get the id somehow
        }
    }


    private async Task CreateDamageDeck()
    {
        // Function creates a full deck of damage cards

        DamageCardDeck = new List<DamageCard>();
        int dcCount = 0;
        foreach (var item in DamageCardList)
        {

            for (int i = 0; i < item.number_cards; i++)
            {
                dcCount++;
                DamageCard dc = new DamageCard();
                dc.id = dcCount;
                dc.ImagePath = item.ImagePath;
                dc.Name = item.Name;
                dc.card_text = item.card_text;
                DamageCardDeck.Add(dc);
            }
        }

        Console.WriteLine("Number of cards in DamageCardDeck = " + DamageCardDeck.Count);
    }

    private async Task GetListOfDamageCards()
    {
        //gets a list of all the cards and their numbers
        var broadsideCards = await ULSC.GetBroadSideDamageCards();

        int totalNumberOfCardsInDeck = 0;
        DamageCardList = new List<DamageCardData>();
        foreach (var item in broadsideCards.Data)
        {
            DamageCardData dc = new DamageCardData();

            dc.Name = item.Name;
            dc.ImagePath = item.ImagePath;
            dc.number_cards = item.number_cards;
            dc.id = item.id;
            dc.card_text = item.card_text;
            totalNumberOfCardsInDeck = totalNumberOfCardsInDeck + dc.number_cards;
            DamageCardList.Add(dc);
        }

        // Console.WriteLine("Total num damage cards = " + totalNumberOfCardsInDeck);
    }

    private async void AddDamageCard()
    {
        //draws a damage card and adds it to the active ship

        saveShipData();
        selectedShip.DamageCards.Add(DrawDamageCard());
        selectedShip.setSummaryText();
        // Console.WriteLine("Card drawn = " + selectedShip.DamageCards[selectedShip.DamageCards.Count - 1].Name);
    }

    private  DamageCard DrawDamageCard() 
    {
        if (DamageCardDeck.Count ==0)
        {
            //create a new deck
            CreateDamageDeck();
            Console.WriteLine("Deck is being reshuffled");
        }

        Random r = new Random();
        int rInt = r.Next(0, DamageCardDeck.Count);

        //get the card
        DamageCard dcr = new DamageCard();
        dcr = DamageCardDeck[rInt];

        //remove it from the collection
        DamageCardDeck.Remove(dcr);

        return dcr;
    }

    #endregion

    private async Task BuildListOfOrderCards()
    {
        var broadsideCards = await ULSC.GetBroadSideOrderCards();

        OrderCardList = new List<OrderCard>();
        foreach (var item in broadsideCards.Data)
        {
            OrderCard oc = new OrderCard();

            oc.Name = item.Name;
            oc.ImagePath = item.ImagePath;
            oc.id = item.id;

            OrderCardList.Add(oc);
        }
    }

    private void ChangeOrderImage()
    {
        // selectedShip.selectedOrderImagePath = "/" + OrderCardList[selectedShip.selectedOrderCard].ImagePath;
        selectedShip.selectedOrderImagePath = OrderCardList[selectedShip.selectedOrderCard].ImagePath;
        Console.WriteLine("Selected ship order image path " + selectedShip.selectedOrderImagePath);
        saveShipData();
        StateHasChanged();

    }

    private async void loadExistingSDSObjects(){

        SH.ServiceResponse<List<SH.BroadsideSDS>> returnValue = await StorServ.LoadExisitngSDSdetails();
        if (returnValue.Success == false)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Couldnt load saved ship data."); // Dont know how to handle if it doenst work. Pretty fked if this happens
        }
        else{
            BroadsideSDSList = returnValue.Data;
            //Even if a previous game is being played, ships could have been added or deleted, so need to check that they are either added or deleted
            SH.ServiceResponse<List<SH.UnitForGameSystemDTO>> returnListOfUnits = await StorServ.RetrieveAllUnits();

            if(returnListOfUnits.Data != null){
                //go through each unit and see if it is the  BroadsideSDSList list

                bool sdsListUpdated = false;
                foreach (var item in returnListOfUnits.Data)
                {
                    bool unitInList = false;
                    foreach (var bsSDS in BroadsideSDSList)
                    {
                        if (item.Id == bsSDS.unitId)
                        {
                            //unit is in list 
                            unitInList = true;
                        }
                    }

                    if (!unitInList){
                        //unit isnt in list, create a SDS for it

                        sdsListUpdated = true;

                        SH.BroadsideSDS newItem = new SH.BroadsideSDS(StorServ);

                        // Console.WriteLine("UnitForGameSystemDTO.ShipsSubsInClass = " + UnitForGameSystemDTO.ShipsSubsInClass);

                        if ((item.ShipsSubsInClass == null) || (ChooseFromOwnedColleciton == false))
                        {
                            if (item.ShipsSubsInClass == null)
                            {
                                item.ShipsSubsInClass = "Enter ship name";
                            }
                            newItem.renameHidden = false;

                            newItem.ShipName = item.Name_ClassName;
                        }
                        else
                        {

                            newItem.ShipName = item.ShipsSubsInClass;
                        }

                        newItem.ImagePath = "ShipImages/3/" + item.Countryobj.Id + "/" + item.ImagePath;

                        newItem.selectedOrderImagePath = OrderCardList[0].ImagePath;
                        newItem.unitId = item.Id;

                        Console.WriteLine("Adding " + newItem.ShipName);
                        BroadsideSDSList.Add(newItem);
                    }
                }

                //make sure that no units had been deleted
                for (int i = BroadsideSDSList.Count - 1; i >= 0; i--)
                {
                    // some code
                    // safePendingList.RemoveAt(i);
                    bool shipInExistingListRemoved = true;

                    foreach (var item in returnListOfUnits.Data)
                    {
                        if (item.Id == BroadsideSDSList[i].unitId)
                        {
                            //unit is in list. dont remove it
                            shipInExistingListRemoved = false;
                        }
                    }

                    if (shipInExistingListRemoved)
                    {
                        sdsListUpdated = true;
                        BroadsideSDSList.RemoveAt(i);
                    }
                }

                // foreach (var bsSDS in BroadsideSDSList)
                // {
                //     bool shipInExistingListRemoved = true;

                //     foreach (var item in returnListOfUnits.Data)
                //     {
                //         if (item.Id == bsSDS.unitId)
                //         {
                //             unit is in list. dont remove it 
                //             shipInExistingListRemoved = false;
                //         }
                //     }

                //     if (shipInExistingListRemoved)
                //     {
                //         sdsListUpdated = true;
                //         BroadsideSDSList.Remove(bsSDS);
                //     }

                // }

                if (sdsListUpdated)
                {
                    //have to update the SDS list in storage
                    await StorServ.SaveAllBroadSDS(BroadsideSDSList);
                }
            }


            selectedShip = BroadsideSDSList[0];
            StateHasChanged();
        }


    }

    private void CreateSDSObjects(List<SH.UnitForGameSystemDTO> data)
    {
        BroadsideSDSList = new List<SH.BroadsideSDS>();

        foreach (var UnitForGameSystemDTO in data)
        {

            for (int i = 0; i < UnitForGameSystemDTO.NumberSelected; i++)
            {
                SH.BroadsideSDS newItem = new SH.BroadsideSDS(StorServ);

                Console.WriteLine("UnitForGameSystemDTO.ShipsSubsInClass = " + UnitForGameSystemDTO.ShipsSubsInClass);

                if ((UnitForGameSystemDTO.ShipsSubsInClass == null) || (ChooseFromOwnedColleciton==false))
                {
                    if (UnitForGameSystemDTO.ShipsSubsInClass==null)
                    {
                        UnitForGameSystemDTO.ShipsSubsInClass = "Enter ship name";
                    }
                    newItem.renameHidden = false;

                    newItem.ShipName = UnitForGameSystemDTO.Name_ClassName;
                }
                else
                {

                }
                {

                    newItem.ShipName = UnitForGameSystemDTO.ShipsSubsInClass;
                }

                newItem.ImagePath = "ShipImages/3/" + UnitForGameSystemDTO.Countryobj.Id + "/" + UnitForGameSystemDTO.ImagePath;

                newItem.selectedOrderImagePath = OrderCardList[0].ImagePath;
                newItem.unitId = UnitForGameSystemDTO.Id;
                BroadsideSDSList.Add(newItem);

            }

            // Console.WriteLine("Is order card acrive" + newItem.orderCard.CardIsActive);
        }

        if (BroadsideSDSList.Count > 0)
        {
            selectedShip = BroadsideSDSList[0];
        }
    }

    private async void ChangeSelectedShip(SH.BroadsideSDS unitToSelect)
    {
        // Console.WriteLine("unit to select = " + unitToSelect.ShipName);

        shipDataChanged = true; //want to save in every case when ship selection changes
        Console.WriteLine("Save ship data on ship selection change");
        saveToStorage();

        selectedShip = unitToSelect;
        StateHasChanged();
    }

    private async void ChangeSettingsFlag()
    {
        showSettings = !showSettings;
    }

    private async void ToggleAdvancedShipView()
    {
        // Console.WriteLine("in toggleadvancedShipview");
        ShowSimpleListOfShips = !ShowSimpleListOfShips;

        if (ShowSimpleListOfShips)
        {
            toggleShipViewName = "Show summary";
        }else{
            toggleShipViewName = "Simple view";
        }

        StateHasChanged();
    }
}
 